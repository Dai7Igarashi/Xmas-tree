{"version":3,"sources":["components/tree/tree.js","components/star/star.js","components/merry/merry.js","Xmas.js","serviceWorker.js","index.js"],"names":["Tree","isVisible","className","svg","xmlns","viewBox","path","d","variants","hidden","opacity","pathLength","fill","transition","duration","ease","visible","initial","animate","Star","handleTap","div","whileHover","scale","whileTap","onTap","rotate","delay","type","loop","Infinity","repeatDelay","stroke","strokeWidth","strokeLinecap","Merry","span","Xmas","useState","canTrans","setCanTrans","setIsVisible","useEffect","setTimeout","event","info","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8ab88dd.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { motion } from \"framer-motion\";\nimport \"./tree.css\";\n\nexport const Tree = ({ isVisible }) => {\n  const body = {\n    hidden: {\n      opacity: 0,\n      pathLength: 0,\n      fill: \"rgba(2, 135, 96, 0)\",\n      transition: {\n        duration: 3.3,\n        ease: \"anticipate\",\n        fill: { duration: 3.5 }\n      }\n    },\n    visible: {\n      opacity: 1,\n      pathLength: 1,\n      fill: \"rgba(2, 135, 96, 1)\",\n      transition: {\n        duration: 2,\n        ease: \"easeInOut\",\n        fill: { duration: 3 }\n      }\n    }\n  };\n  const base = {\n    hidden: {\n      opacity: 0,\n      pathLength: 0,\n      fill: \"rgba(115, 78, 48, 0)\",\n      transition: {\n        duration: 3.5,\n        ease: \"anticipate\",\n        fill: { duration: 3.8 }\n      }\n    },\n    visible: {\n      opacity: 1,\n      pathLength: 1,\n      fill: \"rgba(115, 78, 48, 1)\",\n      transition: {\n        duration: 2,\n        ease: \"easeInOut\",\n        fill: { duration: 3 }\n      }\n    }\n  };\n  return (\n    <div className=\"tree-container\">\n      <motion.svg\n        className=\"tree-body\"\n        xmlns=\"https://www.w3.org/2000/svg\"\n        viewBox=\"0 0 234 222\"\n      >\n        <motion.path\n          className=\"tree-body-stroke\"\n          d=\"M140.93 32.47L154.78 49.39L168.57 66.88L177.28 76.47L147.28 76.47L156.16 90.01L167.44 103.9L183.23 123.85L199.78 140.21L213.13 150.93L177.28 150.93L184.78 164.46L197.9 182.65L217.08 205.15L234 222L0.48 222L19.78 202.26L42.28 174.05L58.57 150.93L21.35 150.93L32.63 141.9L46.73 127.8L63.09 108.62L76.06 92.65L87.28 75.91L57.28 75.91L73.8 57.29L88.47 38.11L117.28 -0.24L140.93 32.47Z\"\n          variants={body}\n          initial=\"hidden\"\n          animate={isVisible ? \"visible\" : \"hidden\"}\n        />\n      </motion.svg>\n      <motion.svg\n        className=\"tree-base\"\n        xmlns=\"https://www.w3.org/2000/svg\"\n        viewBox=\"0 0 43 66\"\n      >\n        <motion.path\n          className=\"tree-base-stroke\"\n          d=\"M33.16 0L43 66.35L0.38 66.35L10.21 0L33.16 0Z\"\n          variants={base}\n          initial=\"hidden\"\n          animate={isVisible ? \"visible\" : \"hidden\"}\n        />\n      </motion.svg>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { motion } from \"framer-motion\";\nimport \"./star.css\";\n\nexport const Star = ({ handleTap }) => {\n  return (\n    <motion.div\n      className=\"star-container\"\n      whileHover={{ scale: 1.2 }}\n      whileTap={{ scale: 0.8 }}\n      onTap={handleTap}\n    >\n      <motion.svg\n        xmlns=\"https://www.w3.org/2000/svg\"\n        viewBox=\"0 0 50 50\"\n        initial={{ rotate: 0 }}\n        animate={{\n          rotate: [-45, 40, -35, 30, -25, 20, -15, 10, -5, 3, -2, 1, 0]\n        }}\n        transition={{\n          delay: 1.5,\n          type: \"spring\",\n          loop: Infinity,\n          repeatDelay: 2,\n          duration: 1.3\n        }}\n      >\n        <path\n          d=\"M32.3 16.23L48.52 18.75L36.81 31.25L39.51 49.26L25 40.63L10.68 48.96L12.5 31.25L1.37 18.75L17.89 16.23L25 0L32.3 16.23Z\"\n          stroke=\"yellow\"\n          strokeWidth=\"1\"\n          strokeLinecap=\"round\"\n          fill=\"yellow\"\n        />\n      </motion.svg>\n    </motion.div>\n  );\n};\n","import * as React from \"react\";\nimport { motion } from \"framer-motion\";\nimport \"./merry.css\";\n\nexport const Merry = ({ isVisible }) => {\n  const merry = {\n    hidden: {\n      opacity: 0,\n      transition: {\n        duration: 3.3,\n        ease: \"anticipate\",\n        fill: { duration: 3.5 }\n      }\n    },\n    visible: {\n      opacity: 1,\n      transition: {\n        duration: 2,\n        ease: \"easeInOut\",\n        fill: { duration: 3 }\n      }\n    }\n  };\n  return (\n    <div className=\"merry-container\">\n      <motion.span\n        className=\"merry-inner\"\n        variants={merry}\n        initial=\"hidden\"\n        animate={isVisible ? \"visible\" : \"hidden\"}\n      >\n        Merry X'mas\n      </motion.span>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport \"./Xmas.css\";\nimport Tree from \"./components/tree\";\nimport Star from \"./components/star\";\nimport Merry from \"./components/merry\";\n\nconst Xmas = () => {\n  const [canTrans, setCanTrans] = useState(true);\n  const [isVisible, setIsVisible] = useState(false);\n\n  const handleTap = (event, info) => {\n    if (!canTrans) {\n      return;\n    }\n    setCanTrans(false);\n    setIsVisible(true);\n  };\n\n  useEffect(() => {\n    if (!canTrans) {\n      setTimeout(() => {\n        setIsVisible(false);\n      }, 4000);\n    }\n    if (isVisible) {\n      setTimeout(() => {\n        setCanTrans(true);\n      }, 8400);\n    }\n  }, [isVisible, canTrans]);\n\n  return (\n    <div className=\"Xmas\">\n      <Star handleTap={handleTap} />\n      <Tree isVisible={isVisible} />\n      <Merry isVisible={isVisible} />\n    </div>\n  );\n};\n\nexport default Xmas;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Xmas from \"./Xmas\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Xmas />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}